import datetime

from telegram import Bot, Message, Update, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from telegram.ext import Job

from campobot import hours, database
from campobot.database import get_report_db, get_profile_list_db

# Callbacks
CALLBACK_REPORT_LAST_MONTH = "report_last_month"
CALLBACK_REPORT_CURRENT_MONTH = "report_current_month"

# Inline Keyboard
CONTACT_KEYBOARD = InlineKeyboardMarkup(
    [[InlineKeyboardButton("Contato", url='t.me/pedrohartmann' )]]
)

LAST_MONTH_KEYBOARD = InlineKeyboardMarkup(
    [[InlineKeyboardButton("M√™s Passado", callback_data=CALLBACK_REPORT_LAST_MONTH)]]
)


CURRENT_MONTH_KEYBOARD = InlineKeyboardMarkup(
    [[InlineKeyboardButton("M√™s Atual", callback_data=CALLBACK_REPORT_CURRENT_MONTH)]]
)


def reports_inline(bot: Bot, update: Update):
    msg: Message = update.effective_message
    report_count = get_report_db(update)

    if report_count is None:
        msg.reply_text(text=u'üìù *Relat√≥rio*\n\n' +
                            u'Ol√°, como vai? \n'
                            u'Por enquanto seu relat√≥rio est√° vazio. '
                            u'Tente adicionar algo primeiro.',
                       reply_markup=LAST_MONTH_KEYBOARD,
                       parse_mode='Markdown')
    else:
        month_report = report_generator(report_count)
        msg.reply_text(text=month_report,
                       reply_markup=LAST_MONTH_KEYBOARD,
                       parse_mode='Markdown')


def reports_callback(bot, update):
    query: CallbackQuery = update.callback_query

    if query.data == CALLBACK_REPORT_LAST_MONTH:
        last_month_number = datetime.datetime.now().month - 1
        last_report_cursor = get_report_db(update, month=last_month_number)

        if last_report_cursor is not None:
            month_report = report_generator(last_report_cursor)
            bot.edit_message_text(text=month_report,
                                  chat_id=query.message.chat_id,
                                  message_id=query.message.message_id,
                                  reply_markup=CURRENT_MONTH_KEYBOARD,
                                  parse_mode='Markdown')

        else:
            return query.answer(text='‚ö†  Voc√™ n√£o relatou no m√™s passado')

    elif query.data == CALLBACK_REPORT_CURRENT_MONTH:
        report_cursor = get_report_db(update)

        if report_cursor is not None:
            month_report = report_generator(report_cursor)
            bot.edit_message_text(text=month_report,
                                  chat_id=query.message.chat_id,
                                  message_id=query.message.message_id,
                                  reply_markup=LAST_MONTH_KEYBOARD,
                                  parse_mode='Markdown')
        else:
            return query.answer(text='‚ö†  Voc√™ n√£o relatou nada nesse m√™s')

    query.answer()


def report_generator(report_count: dict):
    month = report_count.get('month')
    hours_total = report_count.get(u'hours')
    videos_total = report_count.get(u'videos')
    pubs_total = report_count.get(u'publications')
    returns_total = report_count.get(u'returns')
    studies_total = report_count.get(u'studies')

    month_report = u'üìù *Relat√≥rio de {}*'.format(ptbr_month_name(month)) + '\n\n'
    if hours_total is not None:
        month_report += u'üïì Horas: ' + hours.seconds_to_hours(hours_total) + '\n\n'
    else:
        month_report += u'üïì Horas: 0:00' + '\n\n'

    if videos_total is not None:
        month_report += u'üéû V√≠deos: ' + str(videos_total) + '\n\n'
    else:
        month_report += u'üéû V√≠deos: 0' + '\n\n'

    if pubs_total is not None:
        month_report += u'üìï Publica√ß√µes: ' + str(pubs_total) + '\n\n'
    else:
        month_report += u'üìï Publica√ß√µes: 0' + '\n\n'

    if returns_total is not None:
        month_report += u'üè† Revisitas: ' + str(returns_total) + '\n\n'
    else:
        month_report += u'üè† Revisitas: 0' + '\n\n'

    if studies_total is not None:
        month_report += u'üå± Estudos: ' + str(studies_total) + '\n\n'
    else:
        month_report += u'üå± Estudos: 0' + '\n\n'

    return month_report


def ptbr_month_name(month):
    month_list = {
        1: u'Janeiro',
        2: u'Fevereiro',
        3: u'Mar√ßo',
        4: u'Abril',
        5: u'Maio',
        6: u'Junho',
        7: u'Julho',
        8: u'Agosto',
        9: u'Setembro',
        10: u'Outubro',
        11: u'Novembro',
        12: u'Dezembro',
    }

    return month_list.get(month)


def report_notification_job(bot: Bot, job: Job):
    today = datetime.datetime.now().day
    month = datetime.datetime.now().month
    profile_list = get_profile_list_db()

    if (today == 28 and month == 2 or today == 30) \
            and profile_list is not None:

        for profile in profile_list:
            chat_id = profile.get(database.CHAT_ID)
            report_user = get_report_db(chat_id=chat_id)

            if report_user is not None:
                month_report = report_generator(report_user)

                bot.send_message(text=month_report +
                                 'Este √© um lembrete do seu relat√≥rio. \n'
                                 'Parab√©ns por ter se esfor√ßando no campo. Continue assim!',
                                 chat_id=chat_id,
                                 parse_mode='Markdown')

            else:
                bot.send_message(text='Ol√° {}, tudo bem? \n\n'
                                      'Eu notei que esse m√™s voc√™ n√£o chegou a usar este assistente. üò¢ \n'
                                      'Tem alguma coisa que eu poderia melhorar? \n\n'
                                      'O Campo F√°cil foi fruto de um longo trabalho √°rduo, feito com muito carinho para ajudar os publicadores e pioneiros a marcarem suas horas no servi√ßo de campo. \n\n'
                                      'Ele foi feito para funcionar de uma forma simples, para que at√© mesmo pessoas com pouca intimidade com celulares, como os idosos, possam tirar aproveito. \n\n'
                                      'Caso voc√™ n√£o sabia como usar, voc√™ pode tirar suas d√∫vidas escrevendo /ajuda e uma lista com explica√ß√£o de cada fun√ß√£o aparecer. \n\n'
                                      'Mas se mesmo assim voc√™ achou que falta alguma coisa ou que o Campo F√°cil tem algo a melhorar, eu gostaria muito de saber. Voc√™ pode me enviar uma mensagem no contato abaixo. \n\n'
                                      'Espero te ver no m√™s que vem. \n'
                                      'Fique com Jeov√°! üåø \n\n'.format(profile.get(database.USER_FIRSTNAME)),
                                 chat_id=chat_id,
                                 reply_markup=CONTACT_KEYBOARD,
                                 parse_mode='Markdown')


